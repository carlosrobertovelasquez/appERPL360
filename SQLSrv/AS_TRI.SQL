

CREATE VIEW $$COMPANIA$$.V_USUARIO AS
SELECT	*
FROM	ERPADMIN.USUARIO;





CREATE FUNCTION $$COMPANIA$$.udfs_defaults
(
  @Tabla AS VARCHAR(20),
  @UDF   AS VARCHAR(20)
)
RETURNS VARCHAR(254)
AS
BEGIN
      DECLARE @default VARCHAR(254)

      SELECT @default = t.valor_default
      FROM   $$COMPANIA$$.tabla_udf t
      WHERE  t.tabla = @Tabla 
      AND    t.permite_nulos = 'N'
        AND    t.udf = @UDF         
      RETURN @default
END
;

CREATE VIEW $$COMPANIA$$.V_PAIS_REGION AS
SELECT	p.PAIS, p.NOMBRE , 'P' AS TIPO, p.NoteExistsFlag, p.RecordDate,
      	p.RowPointer, p.CreatedBy, p.UpdatedBy, p.CreateDate
FROM	$$COMPANIA$$.PAIS p
UNION
SELECT	R.REGION, R.NOMBRE, 'R' AS TIPO, r.NoteExistsFlag, r.RecordDate,
      	r.RowPointer, r.CreatedBy, r.UpdatedBy, r.CreateDate
FROM	$$COMPANIA$$.REGION r;

REMARK 
\
 ------------------------------------------------------------------ 
 Obtiene el tipo de cambio a moneda local de una moneda
 ------------------------------------------------------------------
/
CREATE FUNCTION $$COMPANIA$$.SoftlandBI_FN_TipoCambioLocal(@CodigoMoneda VARCHAR(4), @Fecha DATETIME)
RETURNS DECIMAL(28,8) AS
BEGIN

	DECLARE @MontoTipoCambio DECIMAL(28,8)
	SET @MontoTipoCambio = NULL

	IF (@CodigoMoneda IS NOT NULL AND @Fecha IS NOT NULL)
	BEGIN
		SELECT	@MontoTipoCambio = MONEDAHIST.monto
		FROM	moneda_hist MONEDAHIST (NOLOCK)
		WHERE	MONEDAHIST.moneda = @CodigoMoneda
			AND MONEDAHIST.fecha = ( 
				SELECT	MAX( MONEDAHIST2.fecha ) 
				FROM	MONEDA_HIST MONEDAHIST2 (NOLOCK)
				WHERE	MONEDAHIST2.moneda = @CodigoMoneda
					AND MONEDAHIST2.fecha <= @Fecha
		)
	END

	RETURN ISNULL(@MontoTipoCambio,1)
END
;

REMARK 
\
 ------------------------------------------------------------------ 
 Obtiene el tipo de cambio a moneda dólar de una moneda
 ------------------------------------------------------------------
/

CREATE FUNCTION $$COMPANIA$$.SoftlandBI_FN_TipoCambioDolar(@CodigoMoneda VARCHAR(4), @Fecha DATETIME)
RETURNS DECIMAL(28,8) AS
BEGIN

	DECLARE @MontoTipoCambio DECIMAL(28,8)
	SET @MontoTipoCambio = NULL

	IF (@CodigoMoneda IS NOT NULL AND @Fecha IS NOT NULL)
	BEGIN
		DECLARE @MontoTipoCambioLocal DECIMAL(28,8)
		DECLARE @MontoTipoCambioDolar DECIMAL(28,8)
		DECLARE @CodigoMonedaDolar VARCHAR(4)

		SELECT @MontoTipoCambioLocal = $$COMPANIA$$.SoftlandBI_FN_TipoCambioLocal(@CodigoMoneda, @Fecha)

		SELECT	@CodigoMonedaDolar = moneda_dolar FROM globales_as

		IF ( @CodigoMonedaDolar != @CodigoMoneda)
		BEGIN
			SELECT	@MontoTipoCambioDolar = MONEDAHIST.monto
			FROM	moneda_hist MONEDAHIST (NOLOCK)
			WHERE	MONEDAHIST.moneda = @CodigoMonedaDolar
				AND MONEDAHIST.fecha = ( 
					SELECT	MAX( MONEDAHIST2.fecha ) 
					FROM	MONEDA_HIST MONEDAHIST2 (NOLOCK)
					WHERE	MONEDAHIST2.moneda = @CodigoMonedaDolar
						AND MONEDAHIST2.fecha <= @Fecha
			)
		END
		ELSE BEGIN SET @MontoTipoCambioDolar = @MontoTipoCambioLocal END

		IF (ISNULL(@MontoTipoCambioDolar,0) != 0) BEGIN SET @MontoTipoCambio = @MontoTipoCambioLocal/@MontoTipoCambioDolar END
		ELSE BEGIN SET @MontoTipoCambio = 1 END
	END

	RETURN ISNULL(@MontoTipoCambio,1)
END;



CREATE VIEW $$COMPANIA$$.V_RELACION_GEOGRAFICA
AS 
SELECT 
P.PAIS PAIS, P.NOMBRE NOMBRE, 
NULL DIVISION_GEOGRAFICA1, 
NULL Nombre_DIVISION_GEOGRAFICA1,
NULL DIVISION_GEOGRAFICA2, 
NULL Nombre_DIVISION_GEOGRAFICA2, 
NULL DIVISION_GEOGRAFICA3, 
NULL Nombre_DIVISION_GEOGRAFICA3, 
NULL DIVISION_GEOGRAFICA4, 
NULL Nombre_DIVISION_GEOGRAFICA4, 
P.Rowpointer, 
P.NoteExistsFlag, 
P.RecordDate, 
P.CreatedBy, 
P.UpdatedBy, 
P.CreateDate 
from $$COMPANIA$$.PAIS P 
WHERE P.PAIS NOT IN ( SELECT DG1.PAIS FROM $$COMPANIA$$.DIVISION_GEOGRAFICA1 DG1 ) 
UNION SELECT P.PAIS PAIS, P.NOMBRE NOMBRE, 
DG1.DIVISION_GEOGRAFICA1 DIVISION_GEOGRAFICA1, 
DG1.NOMBRE NOMBRE_DIVISION_GEOGRAFICA1,
NULL DIVISION_GEOGRAFICA2, 
NULL NOMBRE_DIVISION_GEOGRAFICA2, 
NULL DIVISION_GEOGRAFICA3, 
NULL NOMBRE_DIVISION_GEOGRAFICA3, 
NULL DIVISION_GEOGRAFICA4, 
NULL NOMBRE_DIVISION_GEOGRAFICA4, 
dg1.Rowpointer, dg1.NoteExistsFlag, dg1.RecordDate, dg1.CreatedBy, dg1.UpdatedBy, dg1.CreateDate 
FROM $$COMPANIA$$.PAIS P, $$COMPANIA$$.DIVISION_GEOGRAFICA1 DG1 
WHERE DG1.PAIS = P.PAIS AND 0 = (SELECT COUNT (0) FROM $$COMPANIA$$.DIVISION_GEOGRAFICA2 DG2 
WHERE DG2.PAIS = DG1.PAIS AND DG2.DIVISION_GEOGRAFICA1 = DG1.DIVISION_GEOGRAFICA1) 

UNION SELECT P.PAIS PAIS, P.NOMBRE NOMBRE, 
DG1.DIVISION_GEOGRAFICA1 DIVISION_GEOGRAFICA1, 
DG1.NOMBRE NOMBRE_DIVISION_GEOGRAFICA1,
DG2.DIVISION_GEOGRAFICA2 DIVISION_GEOGRAFICA2, 
DG2.NOMBRE NOMBRE_DIVISION_GEOGRAFICA2, 
NULL DIVISION_GEOGRAFICA3, 
NULL NOMBRE_DIVISION_GEOGRAFICA3, 
NULL DIVISION_GEOGRAFICA4, 
NULL NOMBRE_DIVISION_GEOGRAFICA4, 
dg1.Rowpointer, dg1.NoteExistsFlag, dg1.RecordDate, dg1.CreatedBy, dg1.UpdatedBy, dg1.CreateDate 
FROM $$COMPANIA$$.PAIS P, $$COMPANIA$$.DIVISION_GEOGRAFICA1 DG1, $$COMPANIA$$.DIVISION_GEOGRAFICA2 DG2 
WHERE DG1.PAIS = P.PAIS AND P.PAIS = DG2.PAIS 
 AND DG1.DIVISION_GEOGRAFICA1 = DG2.DIVISION_GEOGRAFICA1 
 AND 0 = (SELECT COUNT (0) FROM $$COMPANIA$$.DIVISION_GEOGRAFICA3 DG3 
WHERE DG3.PAIS = DG2.PAIS 
AND DG3.DIVISION_GEOGRAFICA1 = DG2.DIVISION_GEOGRAFICA1
AND DG3.DIVISION_GEOGRAFICA2 = DG2.DIVISION_GEOGRAFICA2) 

UNION SELECT P.PAIS PAIS, P.NOMBRE NOMBRE, 
DG1.DIVISION_GEOGRAFICA1 DIVISION_GEOGRAFICA1, 
DG1.NOMBRE NOMBRE_DIVISION_GEOGRAFICA1,
DG2.DIVISION_GEOGRAFICA2 DIVISION_GEOGRAFICA2, 
DG2.NOMBRE NOMBRE_DIVISION_GEOGRAFICA2, 
DG3.DIVISION_GEOGRAFICA3 DIVISION_GEOGRAFICA3, 
DG3.NOMBRE NOMBRE_DIVISION_GEOGRAFICA3,  
NULL DIVISION_GEOGRAFICA4, 
NULL NOMBRE_DIVISION_GEOGRAFICA4, 
dg1.Rowpointer, dg1.NoteExistsFlag, dg1.RecordDate, dg1.CreatedBy, dg1.UpdatedBy, dg1.CreateDate 
FROM $$COMPANIA$$.PAIS P, $$COMPANIA$$.DIVISION_GEOGRAFICA1 DG1, $$COMPANIA$$.DIVISION_GEOGRAFICA2 DG2,
 $$COMPANIA$$.DIVISION_GEOGRAFICA3 DG3 
WHERE DG1.PAIS = P.PAIS AND P.PAIS = DG2.PAIS AND P.PAIS = DG3.PAIS 
 AND DG1.DIVISION_GEOGRAFICA1 = DG2.DIVISION_GEOGRAFICA1 
 AND DG1.DIVISION_GEOGRAFICA1 = DG3.DIVISION_GEOGRAFICA1  
 AND DG2.DIVISION_GEOGRAFICA2 = DG3.DIVISION_GEOGRAFICA2 
 AND 0 = (SELECT COUNT (0) FROM $$COMPANIA$$.DIVISION_GEOGRAFICA4 DG4 
WHERE DG4.PAIS = DG3.PAIS 
AND DG4.DIVISION_GEOGRAFICA1 = DG3.DIVISION_GEOGRAFICA1
AND DG4.DIVISION_GEOGRAFICA2 = DG3.DIVISION_GEOGRAFICA2
AND DG4.DIVISION_GEOGRAFICA3 = DG3.DIVISION_GEOGRAFICA3)

UNION SELECT P.PAIS PAIS, P.NOMBRE NOMBRE, 
DG1.DIVISION_GEOGRAFICA1 DIVISION_GEOGRAFICA1, 
DG1.NOMBRE NOMBRE_DIVISION_GEOGRAFICA1,
DG2.DIVISION_GEOGRAFICA2 DIVISION_GEOGRAFICA2, 
DG2.NOMBRE NOMBRE_DIVISION_GEOGRAFICA2, 
DG3.DIVISION_GEOGRAFICA3 DIVISION_GEOGRAFICA3, 
DG3.NOMBRE NOMBRE_DIVISION_GEOGRAFICA3,  
DG4.DIVISION_GEOGRAFICA4 DIVISION_GEOGRAFICA4, 
DG4.NOMBRE NOMBRE_DIVISION_GEOGRAFICA4, 
dg1.Rowpointer, dg1.NoteExistsFlag, dg1.RecordDate, dg1.CreatedBy, dg1.UpdatedBy, dg1.CreateDate 
FROM $$COMPANIA$$.PAIS P, $$COMPANIA$$.DIVISION_GEOGRAFICA1 DG1, $$COMPANIA$$.DIVISION_GEOGRAFICA2 DG2,
 $$COMPANIA$$.DIVISION_GEOGRAFICA3 DG3, $$COMPANIA$$.DIVISION_GEOGRAFICA4 DG4 
WHERE DG1.PAIS = P.PAIS AND P.PAIS = DG2.PAIS AND P.PAIS = DG3.PAIS AND P.PAIS = DG4.PAIS 
AND DG1.DIVISION_GEOGRAFICA1 = DG2.DIVISION_GEOGRAFICA1 
AND DG1.DIVISION_GEOGRAFICA1 = DG3.DIVISION_GEOGRAFICA1 
AND DG1.DIVISION_GEOGRAFICA1 = DG4.DIVISION_GEOGRAFICA1 
AND DG2.DIVISION_GEOGRAFICA2 = DG3.DIVISION_GEOGRAFICA2
AND DG2.DIVISION_GEOGRAFICA2 = DG4.DIVISION_GEOGRAFICA2
AND DG3.DIVISION_GEOGRAFICA3 = DG4.DIVISION_GEOGRAFICA3;





Create TRIGGER $$Compania$$.NCF_DOCUMENTO_updateTabla ON $$Compania$$.NCF_DOCUMENTO
   FOR INSERT
AS 
BEGIN
DECLARE
	@tabla varchar(20)
	BEGIN
		SET NOCOUNT ON
			SET @tabla=( SELECT TABLA FROM inserted)
		if (@tabla ='DOCUMENTOS_CC')
		BEGIN
		   UPDATE $$Compania$$.DOCUMENTOS_CC
	       SET    DOCUMENTO_FISCAL = ii.NCF
	       FROM   inserted ii,  
		      $$Compania$$.DOCUMENTOS_CC tab  
	       WHERE  ii.RowPointer = tab.RowPointer 
	    END
	    if (@tabla ='DOCUMENTOS_CP')
		BEGIN
		   UPDATE $$Compania$$.DOCUMENTOS_CP
	       SET    DOCUMENTO_FISCAL = ii.NCF
	       FROM   inserted ii,  
		      $$Compania$$.DOCUMENTOS_CC tab  
	       WHERE  ii.RowPointer = tab.RowPointer  
	    END
		if (@tabla ='FACTURA')
		BEGIN
		   UPDATE $$Compania$$.FACTURA
	       SET    DOC_FISCAL = ii.NCF
	       FROM   inserted ii,  
		      $$Compania$$.DOCUMENTOS_CC tab  
	       WHERE  ii.RowPointer = tab.RowPointer  
	    END
			if (@tabla ='DOCUMENTO_POST')
		BEGIN
		   UPDATE $$Compania$$.FACTURA
	       SET    DOC_FISCAL = ii.NCF
	       FROM   inserted ii,  
		      $$Compania$$.DOCUMENTOS_CC tab  
	       WHERE  ii.RowPointer = tab.RowPointer  
	    END
	END
END;





/*Se crea la funcion de Nivel Codigo*/
CREATE FUNCTION $$COMPANIA$$.NivelCodigo (@Codigo varchar(25),@Patron varchar(25)) 
RETURNS SMALLINT AS BEGIN  
DECLARE @result SMALLINT  
DECLARE @nivel SMALLINT 
DECLARE @i SMALLINT  DECLARE @c CHAR  
DECLARE @CodigoCeros varchar(25)   
SET @CodigoCeros = replace(@Patron,'9','0')  
SET @CodigoCeros = replace(@CodigoCeros,'A','0')   
SELECT @result = -1, @nivel = 1    IF (@Codigo = @CodigoCeros)   
SET @result = 1  ELSE  BEGIN     SET @i = 1   WHILE @i <= LEN(@Codigo)   
BEGIN    SET @c = SUBSTRING(@Codigo,@i,1)    IF (@c = '-' or @c = '.' )    
BEGIN     IF (SUBSTRING(@Codigo,@i,25) = SUBSTRING(@CodigoCeros,@i,25) )     
BEGIN      SET @result = @nivel      SET @i = LEN(@Codigo)     
END     SET @nivel = @nivel + 1    END        SET @i = @i + 1   
END     IF (@result = -1 )    SET @result = @nivel  END   RETURN(@result) 
END;



CREATE FUNCTION $$COMPANIA$$.GETTIPOCAMBIOFECHA(@MONEDA VARCHAR(4), @FECHA DATETIME)
RETURNS DECIMAL(28,8)
AS
BEGIN
  -- SE DECLARAN LAS VARIABLES
  DECLARE @MONTO DECIMAL(28,8) 
  
  -- SE OBTIENE EL MONTO SEGÚN LA MONEDA Y LA FECHA MÁS PROXIMA
  SELECT @MONTO = MONTO
  FROM $$COMPANIA$$.MONEDA_HIST AS A
  WHERE MONEDA = @MONEDA
    AND FECHA = (SELECT MAX(FECHA)
                 FROM $$COMPANIA$$.MONEDA_HIST AS B 
                 WHERE A.MONEDA = B.MONEDA
                   AND B.FECHA <= ISNULL(@FECHA, ERPADMIN.SF_GETDATE()))

  -- SI EL MONTO ES NULO COLOCAR UN 1    
  RETURN ISNULL(@MONTO,1)
END;


IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'$$COMPANIA$$.CONTACTO_CLIENTE') AND type in (N'U'))
BEGIN
	DECLARE @CARGO VARCHAR(30), @CODIGO VARCHAR(4), @CONT int;
	DECLARE C_CARGO CURSOR FOR SELECT DISTINCT CARGO FROM $$COMPANIA$$.CONTACTO_CLIENTE;
	BEGIN
		set @CONT = 0;

		OPEN C_CARGO;
		FETCH NEXT FROM C_CARGO INTO @CARGO;

		WHILE @@FETCH_STATUS = 0
		BEGIN
			IF @CARGO IS NOT NULL
			BEGIN
				/*SE OBTIENE EL CONSECUTIVO */
				SET @CODIGO = 'C';
				set @CONT = @CONT + 1;
				SET @CODIGO = @CODIGO + CONVERT(varchar(10),@CONT)

				/*SE REALIZA EL INSERT*/
				INSERT INTO $$COMPANIA$$.CARGOS(CODIGO, DESCRIPCION)
				VALUES(@CODIGO, @CARGO)

				/*SI SE INSERTO ALGO ENTONCES SE REALIZA EL UPDATE */
				IF @@ROWCOUNT > 0
				BEGIN	
					UPDATE	$$COMPANIA$$.CONTACTO_CLIENTE
					SET		CARGO = @CODIGO
					WHERE	CARGO = @CARGO 
				END
			END
			FETCH NEXT FROM C_CARGO INTO @CARGO;
		END
		CLOSE C_CARGO;
		DEALLOCATE C_CARGO;
	END
END;

CREATE FUNCTION ERPADMIN.POS_FormatoFecha
(
	@FECHA DATETIME
)
RETURNS	VARCHAR(8000)
AS
BEGIN
	DECLARE	@VALOR VARCHAR(100)
	IF	@FECHA IS NOT NULL
	BEGIN
	SET @VALOR =CONVERT( VARCHAR, DAY(@FECHA) ) + '-' +
		CONVERT( VARCHAR, MONTH(@FECHA) ) + '-' +
		CONVERT( VARCHAR, YEAR(@FECHA) ) + ' ' +
		CONVERT( VARCHAR, DATEPART(HOUR, @FECHA) ) + ':' +
		CONVERT( VARCHAR, DATEPART(MINUTE, @FECHA) ) + ':' +
		CONVERT( VARCHAR, DATEPART(SECOND, @FECHA) ) + '.' +
		CONVERT( VARCHAR, DATEPART(MILLISECOND, @FECHA))
	END
	ELSE
	BEGIN
		SET @VALOR = '@$NULL$@'
	END
	RETURN @VALOR
END;


CREATE PROCEDURE $$COMPANIA$$.POS_INSERTA_ELIMINACION
(
	@SENTENCIA			VARCHAR(254),
	@NOMBRETABLA		VARCHAR(254)
)
AS
BEGIN
 DECLARE @ERROR VARCHAR(MAX)
 DECLARE @TIPO_TIENDA VARCHAR(1)
 DECLARE @MODULO_OFF   INT
 
 

	SELECT @MODULO_OFF = COUNT(0)  
		FROM ERPADMIN.MODULO_INSTALADO 
			WHERE CONJUNTO  = '$$COMPANIA$$' AND ACCION = 3159

 IF (@MODULO_OFF > 0)
 BEGIN
  BEGIN TRY

  SELECT @TIPO_TIENDA =  TIPO_TIENDA 
  FROM $$COMPANIA$$.GLOBALES_POS

  INSERT INTO $$COMPANIA$$.ELIMINACION_SINCRO_POS (TIPO_TIENDA, FECHA_ELIMINACION, SENTENCIA, NOMBRE_TABLA, ESTADO, FECHA_APLICACION, DETALLE_ERROR)
  VALUES(@TIPO_TIENDA, ERPADMIN.SF_GETDATE(), @SENTENCIA, @NOMBRETABLA, 'P' , NULL, NULL)
  
  END TRY
  BEGIN CATCH
   ROLLBACK
   SET @ERROR = 'Se produjo un error insertando los datos del registro que se eliminó en la tabla ELIMINACION_SINCRO_POS. ' + ERROR_MESSAGE()
   RAISERROR(@ERROR,16,1 )
  END CATCH
 END
END;


CREATE TRIGGER $$COMPANIA$$.ENC_TABLA_UDF_POS_SINC_DEL 
				ON $$COMPANIA$$.ENC_TABLA_UDF
FOR DELETE  
AS 
BEGIN   	
	DECLARE @ERROR				INT
	DECLARE @SENTENCIA   		VARCHAR(254)
	DECLARE @NOMBRETABLA		VARCHAR(254)
	DECLARE @USUARIO_ACTUAL		VARCHAR(30)

	DECLARE @TABLA VARCHAR(18)

	SET @NOMBRETABLA = 'ENC_TABLA_UDF'

	EXEC ERPADMIN.LeerUsuarioActual @USUARIO_ACTUAL OUTPUT

	/*Aquí se hace la validación del usuario de conexión para evitar ping-pong*/
	IF NOT ('SoftlandSync' = @USUARIO_ACTUAL)
	BEGIN
		DECLARE C_DELETED CURSOR LOCAL FOR
		SELECT TABLA
		FROM DELETED d
			
		OPEN C_DELETED
		FETCH NEXT FROM C_DELETED INTO 
		@TABLA
		
		SET @ERROR = 0
		
		WHILE @@FETCH_STATUS = 0 AND @ERROR = 0
		BEGIN
			SET @SENTENCIA = 'DELETE FROM $$COMPANIA$$.'+ @NOMBRETABLA + ' WHERE TABLA = ''' + @TABLA + ''''
							  
			EXECUTE @ERROR = $$COMPANIA$$.POS_INSERTA_ELIMINACION @SENTENCIA, @NOMBRETABLA
			
			FETCH NEXT FROM C_DELETED INTO 
			@TABLA
		END

		CLOSE C_DELETED
		DEALLOCATE C_DELETED
	END
	
	IF (@@ERROR <> 0) 
	BEGIN
		RAISERROR( 'Error generando la sentencia de eliminación de la tabla ENC_TABLA_UDF.',16,1 )
	END
END
;


CREATE TRIGGER $$COMPANIA$$.TABLA_UDF_POS_SINC_DEL
ON $$COMPANIA$$.TABLA_UDF
FOR DELETE  
AS 
BEGIN   	
	DECLARE @ERROR				INT
	DECLARE @SENTENCIA   		VARCHAR(254)
	DECLARE @NOMBRETABLA		VARCHAR(254)
	DECLARE @USUARIO_ACTUAL		VARCHAR(30)

	DECLARE @TABLA VARCHAR(18)
	DECLARE @UDF VARCHAR(30)

	SET @NOMBRETABLA = 'TABLA_UDF'

	EXEC ERPADMIN.LeerUsuarioActual @USUARIO_ACTUAL OUTPUT

	/* Aquí se hace la validación del usuario de conexión para evitar ping-pong */
	IF NOT ('SoftlandSync' = @USUARIO_ACTUAL)
	BEGIN
		DECLARE C_DELETED CURSOR LOCAL FOR
			SELECT TABLA, UDF
			FROM DELETED d
			
		OPEN C_DELETED
		FETCH NEXT FROM C_DELETED INTO 
		@TABLA, @UDF
		
		SET @ERROR = 0
		
		WHILE @@FETCH_STATUS = 0 AND @ERROR = 0
		BEGIN
			SET @SENTENCIA = 'DELETE FROM $$COMPANIA$$.' + @NOMBRETABLA + ' WHERE TABLA = ''' + @TABLA + ''' AND UDF = ''' + @UDF + ''''
			
			EXECUTE @ERROR = $$COMPANIA$$.POS_INSERTA_ELIMINACION @SENTENCIA, @NOMBRETABLA
			
			FETCH NEXT FROM C_DELETED INTO 
			@TABLA, @UDF
		END

		CLOSE C_DELETED
		DEALLOCATE C_DELETED
	END
	
	IF (@@ERROR <> 0) 
	BEGIN
		RAISERROR( 'Error generando la sentencia de eliminación de la tabla TABLA_UDF.',16,1 )
	END
END;


CREATE TRIGGER $$COMPANIA$$.USUARIO_BODEGA_POS_SINC_DEL
ON $$COMPANIA$$.USUARIO_BODEGA
FOR DELETE  
AS 
BEGIN   	
	DECLARE @ERROR INT
	DECLARE @SENTENCIA   		VARCHAR(254)
	DECLARE @NOMBRETABLA		VARCHAR(254)
	DECLARE @USUARIO_ACTUAL		VARCHAR(30)

	DECLARE @BODEGA VARCHAR(4)
	DECLARE @USUARIO VARCHAR(25)

	SET @NOMBRETABLA = 'USUARIO_BODEGA'

	EXEC ERPADMIN.LeerUsuarioActual @USUARIO_ACTUAL OUTPUT

	/* Aquí se hace la validación del usuario de conexión para evitar ping-pong */
	IF NOT ('SoftlandSync' = @USUARIO_ACTUAL)
	BEGIN
		DECLARE C_DELETED CURSOR LOCAL FOR
		SELECT BODEGA, USUARIO
		FROM DELETED d

		OPEN C_DELETED
		FETCH NEXT FROM C_DELETED INTO 
		@BODEGA, @USUARIO
		
		SET @ERROR = 0
		
		WHILE @@FETCH_STATUS = 0 AND @ERROR = 0
		BEGIN
			SET @SENTENCIA = 'DELETE FROM $$COMPANIA$$.' + @NOMBRETABLA + ' WHERE BODEGA = ''' + @BODEGA + ''' AND USUARIO = ''' + @USUARIO + ''''
			
			EXECUTE @ERROR = $$COMPANIA$$.POS_INSERTA_ELIMINACION @SENTENCIA, @NOMBRETABLA
			
			FETCH NEXT FROM C_DELETED INTO 
			@BODEGA, @USUARIO
		END

		CLOSE C_DELETED
		DEALLOCATE C_DELETED
	END
	
	IF (@@ERROR <> 0) 
	BEGIN
		RAISERROR( 'Error generando la sentencia de eliminación de la tabla USUARIO_BODEGA.',16,1 )
	END
END;


CREATE TRIGGER $$COMPANIA$$.EXCEP_CIUDAD_POS_SINC_DEL
ON $$COMPANIA$$.EXCEP_CIUDAD
FOR DELETE  
AS 
BEGIN   	
 	DECLARE @ERROR INT
	DECLARE @SENTENCIA   		VARCHAR(254)
	DECLARE @NOMBRETABLA		VARCHAR(254)
	DECLARE @USUARIO_ACTUAL		VARCHAR(30)

	DECLARE @PAIS VARCHAR(4)
	DECLARE @DIVISION_GEOGRAFICA1 VARCHAR(12)
	DECLARE @DIVISION_GEOGRAFICA2 VARCHAR(12)
	DECLARE @CODIGO_RETENCION VARCHAR(4)
	
	SET @NOMBRETABLA = 'EXCEP_CIUDAD'

	EXEC ERPADMIN.LeerUsuarioActual @USUARIO_ACTUAL OUTPUT

	/* Aquí se hace la validación del usuario de conexión para evitar ping-pong */
	IF NOT ('SoftlandSync' = @USUARIO_ACTUAL)
	BEGIN
		DECLARE C_DELETED CURSOR LOCAL FOR
			SELECT PAIS, DIVISION_GEOGRAFICA1, DIVISION_GEOGRAFICA2, CODIGO_RETENCION
			FROM  DELETED d

		OPEN C_DELETED
		FETCH NEXT FROM C_DELETED INTO 
		@PAIS, @DIVISION_GEOGRAFICA1, @DIVISION_GEOGRAFICA2, @CODIGO_RETENCION
		
		SET @ERROR = 0
		
		WHILE @@FETCH_STATUS = 0 AND @ERROR = 0
		BEGIN
			SET @SENTENCIA = 'DELETE FROM $$COMPANIA$$.' + @NOMBRETABLA + ' WHERE PAIS = ''' + @PAIS + ''' AND DIVISION_GEOGRAFICA1 = ''' + @DIVISION_GEOGRAFICA1 + ''' AND DIVISION_GEOGRAFICA2 = ''' + @DIVISION_GEOGRAFICA2 + ''' AND CODIGO_RETENCION = ''' + @CODIGO_RETENCION + ''''
			
			EXECUTE @ERROR = $$COMPANIA$$.POS_INSERTA_ELIMINACION @SENTENCIA, @NOMBRETABLA
			
			FETCH NEXT FROM C_DELETED INTO 
			@PAIS, @DIVISION_GEOGRAFICA1, @DIVISION_GEOGRAFICA2, @CODIGO_RETENCION
		END

		CLOSE C_DELETED
		DEALLOCATE C_DELETED
	END
	
	IF (@@ERROR <> 0) 
	BEGIN
		RAISERROR( 'Error generando la sentencia de eliminación de la tabla EXCEP_CIUDAD.',16,1 )
	END
END;


CREATE TRIGGER $$COMPANIA$$.DET_MOD_RET_POS_SINC_DEL
ON $$COMPANIA$$.DET_MOD_RETENCION
FOR DELETE  
AS 
BEGIN   	
	DECLARE @ERROR INT
	DECLARE @SENTENCIA   		VARCHAR(254)
	DECLARE @NOMBRETABLA		VARCHAR(254)
	DECLARE @USUARIO_ACTUAL		VARCHAR(30)

	DECLARE @CODIGO_RETENCION VARCHAR(4)
	DECLARE @MODELO_RETENCION VARCHAR(4)

	SET @NOMBRETABLA = 'DET_MOD_RETENCION'

	EXEC ERPADMIN.LeerUsuarioActual @USUARIO_ACTUAL OUTPUT

	/* Aquí se hace la validación del usuario de conexión para evitar ping-pong */
	IF NOT ('SoftlandSync' = @USUARIO_ACTUAL)
	BEGIN
		DECLARE C_DELETED CURSOR LOCAL FOR
			SELECT CODIGO_RETENCION, MODELO_RETENCION
			FROM DELETED d

		OPEN C_DELETED
		FETCH NEXT FROM C_DELETED INTO 
		@CODIGO_RETENCION, @MODELO_RETENCION
		
		SET @ERROR = 0
		
		WHILE @@FETCH_STATUS = 0 AND @ERROR = 0
		BEGIN
			SET @SENTENCIA = 'DELETE FROM $$COMPANIA$$.' + @NOMBRETABLA + ' WHERE CODIGO_RETENCION = ''' + @CODIGO_RETENCION + ''' AND MODELO_RETENCION = ''' + @MODELO_RETENCION + ''''
			
			EXECUTE @ERROR = $$COMPANIA$$.POS_INSERTA_ELIMINACION @SENTENCIA, @NOMBRETABLA
			
			FETCH NEXT FROM C_DELETED INTO 
			@CODIGO_RETENCION, @MODELO_RETENCION
		END

		CLOSE C_DELETED
		DEALLOCATE C_DELETED
	END
	
	IF (@@ERROR <> 0) 
	BEGIN
		RAISERROR( 'Error generando la sentencia de eliminación de la tabla DET_MOD_RETENCION.',16,1 )
	END
END;


CREATE TRIGGER $$COMPANIA$$.EXCEP_REGIMEN_POS_SINC_DEL
ON $$COMPANIA$$.EXCEP_REGIMEN
FOR DELETE  
AS 
BEGIN   	
	DECLARE @ERROR INT
	DECLARE @SENTENCIA   		VARCHAR(254)
	DECLARE @NOMBRETABLA		VARCHAR(254)
	DECLARE @USUARIO_ACTUAL		VARCHAR(30)

	DECLARE @CODIGO VARCHAR(12)
	DECLARE @CODIGO_RETENCION VARCHAR(4)
	
	SET @NOMBRETABLA = 'EXCEP_REGIMEN'

	EXEC ERPADMIN.LeerUsuarioActual @USUARIO_ACTUAL OUTPUT

	/*Aquí se hace la validación del usuario de conexión para evitar ping-pong*/
	IF NOT ('SoftlandSync' = @USUARIO_ACTUAL)
	BEGIN
		DECLARE C_DELETED CURSOR LOCAL FOR
			SELECT CODIGO, CODIGO_RETENCION
			FROM DELETED d
			
		OPEN C_DELETED
		FETCH NEXT FROM C_DELETED INTO 
		@CODIGO, @CODIGO_RETENCION
		
		SET @ERROR = 0
		
		WHILE @@FETCH_STATUS = 0 AND @ERROR = 0
		BEGIN
			SET @SENTENCIA = 'DELETE FROM $$COMPANIA$$.' + @NOMBRETABLA + ' WHERE CODIGO = ''' + @CODIGO + ''' AND CODIGO_RETENCION = ''' + @CODIGO_RETENCION + ''''
			
			EXECUTE @ERROR = $$COMPANIA$$.POS_INSERTA_ELIMINACION @SENTENCIA, @NOMBRETABLA
			
			FETCH NEXT FROM C_DELETED INTO 
			@CODIGO, @CODIGO_RETENCION
		END

		CLOSE C_DELETED
		DEALLOCATE C_DELETED
	END
	
	IF (@@ERROR <> 0) 
	BEGIN
		RAISERROR( 'Error generando la sentencia de eliminación de la tabla EXCEP_REGIMEN.',16,1 )
	END
END;



CREATE TRIGGER $$COMPANIA$$.NCF_CONSEC_USU_POS_SINC_DEL
ON $$COMPANIA$$.NCF_CONSECUTIVO_USUARIO
FOR DELETE  
AS 
BEGIN   	
	DECLARE @ERROR 				INT
	DECLARE @SENTENCIA   		VARCHAR(254)
	DECLARE @NOMBRETABLA		VARCHAR(254)
	DECLARE @USUARIO_ACTUAL		VARCHAR(30)

	DECLARE @PREFIJO 			VARCHAR(20)
	DECLARE @USUARIO 			VARCHAR(25)
	DECLARE @RowPointer 		VARCHAR(36)

	SET @NOMBRETABLA = 'NCF_CONSECUTIVO_USUARIO'

	EXEC ERPADMIN.LeerUsuarioActual @USUARIO_ACTUAL OUTPUT

	/*Aquí se hace la validación del usuario de conexión para evitar ping-pong*/
	IF NOT ('SoftlandSync' = @USUARIO_ACTUAL)
	BEGIN
		DECLARE C_DELETED CURSOR LOCAL FOR
			SELECT PREFIJO, USUARIO, RowPointer
			FROM DELETED d

		OPEN C_DELETED
		FETCH NEXT FROM C_DELETED INTO 
		@PREFIJO, @USUARIO, @RowPointer
		
		SET @ERROR = 0
		
		WHILE @@FETCH_STATUS = 0 AND @ERROR = 0
		BEGIN
			SET @SENTENCIA = 'DELETE FROM $$COMPANIA$$.' + @NOMBRETABLA + ' WHERE PREFIJO = ''' + @PREFIJO + ''' AND USUARIO = ''' + @USUARIO + ''' AND RowPointer = ''' + @RowPointer +''''
			
			EXECUTE @ERROR = $$COMPANIA$$.POS_INSERTA_ELIMINACION @SENTENCIA, @NOMBRETABLA
			
			FETCH NEXT FROM C_DELETED INTO 
			@PREFIJO, @USUARIO, @RowPointer
		END

		CLOSE C_DELETED
		DEALLOCATE C_DELETED
	END
	
	IF (@@ERROR <> 0) 
	BEGIN
		RAISERROR( 'Error generando la sentencia de eliminación de la tabla NCF_CONSECUTIVO_USUARIO.',16,1 )
	END
END;


CREATE TRIGGER $$COMPANIA$$.DENOMINACION_POS_SINC_DEL
ON $$COMPANIA$$.DENOMINACION
FOR DELETE  
AS 
BEGIN   	
	DECLARE @ERROR INT
	DECLARE @SENTENCIA   		VARCHAR(254)
	DECLARE @NOMBRETABLA		VARCHAR(254)
	DECLARE @USUARIO_ACTUAL		VARCHAR(30)

	DECLARE @TIPO VARCHAR(1)
	DECLARE @DENOM_MONTO DECIMAL(28,8)

	SET @NOMBRETABLA = 'DENOMINACION'

	EXEC ERPADMIN.LeerUsuarioActual @USUARIO_ACTUAL OUTPUT

	/*Aquí se hace la validación del usuario de conexión para evitar ping-pong*/
	IF NOT ('SoftlandSync' = @USUARIO_ACTUAL)
	BEGIN
		DECLARE C_DELETED CURSOR LOCAL FOR
			SELECT TIPO, DENOM_MONTO
			FROM DELETED d

		OPEN C_DELETED
		FETCH NEXT FROM C_DELETED INTO 
		@TIPO, @DENOM_MONTO
		
		SET @ERROR = 0
		
		WHILE @@FETCH_STATUS = 0 AND @ERROR = 0
		BEGIN
			SET @SENTENCIA = 'DELETE FROM $$COMPANIA$$.' + @NOMBRETABLA + ' WHERE TIPO = ''' + @TIPO + ''' AND DENOM_MONTO = ''' + CONVERT(VARCHAR(36),@DENOM_MONTO) + ''''
			
			EXECUTE @ERROR = $$COMPANIA$$.POS_INSERTA_ELIMINACION @SENTENCIA, @NOMBRETABLA
			
			FETCH NEXT FROM C_DELETED INTO 
			@TIPO, @DENOM_MONTO
		END

		CLOSE C_DELETED
		DEALLOCATE C_DELETED
	END
	
	IF (@@ERROR <> 0) 
	BEGIN
		RAISERROR( 'Error generando la sentencia de eliminación de la tabla DENOMINACION.',16,1 )
	END
END;


CREATE TRIGGER $$COMPANIA$$.TIPO_TARJETA_POS_SINC_DEL
ON $$COMPANIA$$.TIPO_TARJETA
FOR DELETE  
AS 
BEGIN   	
	DECLARE @ERROR 				INT
	DECLARE @SENTENCIA   		VARCHAR(254)
	DECLARE @NOMBRETABLA		VARCHAR(254)
	DECLARE @USUARIO_ACTUAL		VARCHAR(30)

	DECLARE @TIPO_TARJETA 		VARCHAR(12)

	SET @NOMBRETABLA = 'TIPO_TARJETA'

	EXEC ERPADMIN.LeerUsuarioActual @USUARIO_ACTUAL OUTPUT

	/*Aquí se hace la validación del usuario de conexión para evitar ping-pong*/
	IF NOT ('SoftlandSync' = @USUARIO_ACTUAL)
	BEGIN
		DECLARE C_DELETED CURSOR LOCAL FOR
			SELECT TIPO_TARJETA
			FROM DELETED d

		OPEN C_DELETED
		FETCH NEXT FROM C_DELETED INTO 
		@TIPO_TARJETA
		
		SET @ERROR = 0
		
		WHILE @@FETCH_STATUS = 0 AND @ERROR = 0
		BEGIN
			SET @SENTENCIA = 'DELETE FROM $$COMPANIA$$.' + @NOMBRETABLA + ' WHERE TIPO_TARJETA = ''' + @TIPO_TARJETA + ''''
			
			EXECUTE @ERROR = $$COMPANIA$$.POS_INSERTA_ELIMINACION @SENTENCIA, @NOMBRETABLA
			
			FETCH NEXT FROM C_DELETED INTO 
			@TIPO_TARJETA
		END

		CLOSE C_DELETED
		DEALLOCATE C_DELETED
	END
	
	IF (@@ERROR <> 0) 
	BEGIN
		RAISERROR( 'Error generando la sentencia de eliminación de la tabla TIPO_TARJETA.',16,1 )
	END
END;


CREATE TRIGGER $$COMPANIA$$.CONFIG_TARJETAS_POS_SINC_DEL
ON $$COMPANIA$$.CONFIG_TARJETAS
FOR DELETE  
AS 
BEGIN   	
	DECLARE @ERROR INT
	DECLARE @SENTENCIA   		VARCHAR(254)
	DECLARE @NOMBRETABLA		VARCHAR(254)
	DECLARE @USUARIO_ACTUAL		VARCHAR(30)

	DECLARE @TIPO_TARJETA VARCHAR(12)
	DECLARE @NOMBRE VARCHAR(30)
	
	SET @NOMBRETABLA = 'CONFIG_TARJETAS'

	EXEC ERPADMIN.LeerUsuarioActual @USUARIO_ACTUAL OUTPUT

	/*Aquí se hace la validación del usuario de conexión para evitar ping-pong*/
	IF NOT ('SoftlandSync' = @USUARIO_ACTUAL)
	BEGIN
		DECLARE C_DELETED CURSOR LOCAL FOR
			SELECT TIPO_TARJETA, NOMBRE
			FROM DELETED d

		OPEN C_DELETED
		FETCH NEXT FROM C_DELETED INTO 
		@TIPO_TARJETA, @NOMBRE
		
		SET @ERROR = 0
		
		WHILE @@FETCH_STATUS = 0 AND @ERROR = 0
		BEGIN
			SET @SENTENCIA = 'DELETE FROM $$COMPANIA$$.' + @NOMBRETABLA + ' WHERE TIPO_TARJETA = ''' + @TIPO_TARJETA + ''' AND NOMBRE = ''' + @NOMBRE + ''''
			
			EXECUTE @ERROR = $$COMPANIA$$.POS_INSERTA_ELIMINACION @SENTENCIA, @NOMBRETABLA
			
			FETCH NEXT FROM C_DELETED INTO 
			@TIPO_TARJETA, @NOMBRE
		END

		CLOSE C_DELETED
		DEALLOCATE C_DELETED
	END
	
	IF (@@ERROR <> 0) 
	BEGIN
		RAISERROR( 'Error generando la sentencia de eliminación de la tabla CONFIG_TARJETAS.',16,1 )
	END
END
;

ALTER TRIGGER $$COMPANIA$$.NCF_DOCUMENTO_updateTabla ON $$COMPANIA$$.NCF_DOCUMENTO
    FOR INSERT
 AS 
 BEGIN
 DECLARE
  @tabla varchar(20)
  BEGIN
   SET NOCOUNT ON
    SET @tabla=( SELECT TABLA FROM inserted)
   if (@tabla ='DOCUMENTOS_CC')
   BEGIN
      UPDATE $$COMPANIA$$.DOCUMENTOS_CC
         SET    DOCUMENTO_FISCAL = ii.NCF
         FROM   inserted ii,  
         $$COMPANIA$$.DOCUMENTOS_CC tab  
         WHERE  ii.RowPointer = tab.RowPointer 
      END
      if (@tabla ='DOCUMENTOS_CP')
   BEGIN
      UPDATE $$COMPANIA$$.DOCUMENTOS_CP
         SET    DOCUMENTO_FISCAL = ii.NCF
         FROM   inserted ii,  
         $$COMPANIA$$.DOCUMENTOS_CP tab  
         WHERE  ii.RowPointer = tab.RowPointer  
      END
   if (@tabla ='FACTURA')
   BEGIN
      UPDATE $$COMPANIA$$.FACTURA
         SET    DOC_FISCAL = ii.NCF
         FROM   inserted ii,  
         $$COMPANIA$$.FACTURA tab  
         WHERE  ii.RowPointer = tab.RowPointer  
      END
    if (@tabla ='DOCUMENTO_POS')
   BEGIN
      UPDATE $$COMPANIA$$.DOCUMENTO_POS
         SET    DOC_FISCAL = ii.NCF
         FROM   inserted ii,  
         $$COMPANIA$$.DOCUMENTO_POS tab  
         WHERE  ii.RowPointer = tab.RowPointer  
      END
  END
 END;
 
 /*Declare Consecutivo NFCs*/
 
DECLARE @PREFIJO VARCHAR(20), @USUARIO VARCHAR(30), @CONT INT, @CONT1 INT;
DECLARE C_NCF CURSOR FOR SELECT PREFIJO, USUARIO FROM $$COMPANIA$$.NCF_CONSECUTIVO_USUARIO;
BEGIN 
	OPEN C_NCF;
	FETCH NEXT FROM C_NCF INTO @PREFIJO, @USUARIO;
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @CONT = 0;
		SELECT	@CONT = COUNT(*)
		FROM	$$COMPANIA$$.NCF_CONSECUTIVO 
		GROUP BY	TIPO_DOC, TIPO_CONTRIBUYENTE 
		HAVING	TIPO_DOC = (SELECT TIPO_DOC FROM $$COMPANIA$$.NCF_CONSECUTIVO WHERE PREFIJO = @PREFIJO )
		AND		TIPO_CONTRIBUYENTE = ( SELECT TIPO_CONTRIBUYENTE FROM $$COMPANIA$$.NCF_CONSECUTIVO WHERE PREFIJO = @PREFIJO );

		IF ( @CONT <= 1 )
		BEGIN
			UPDATE $$COMPANIA$$.NCF_CONSECUTIVO_USUARIO SET NCF_DEFAULT = 'S' WHERE PREFIJO = @PREFIJO AND USUARIO = @USUARIO;
		END
		ELSE
		BEGIN 
			SET @CONT1 = 0
			SELECT	@CONT1 = COUNT(*) 
			FROM	$$COMPANIA$$.NCF_CONSECUTIVO_USUARIO 
			WHERE	USUARIO = @USUARIO
			AND		PREFIJO IN (SELECT	PREFIJO 
								FROM	$$COMPANIA$$.NCF_CONSECUTIVO 
								GROUP BY	TIPO_DOC, TIPO_CONTRIBUYENTE, PREFIJO 
								HAVING		TIPO_DOC = (SELECT TIPO_DOC FROM $$COMPANIA$$.NCF_CONSECUTIVO WHERE PREFIJO = @PREFIJO )
								AND			TIPO_CONTRIBUYENTE = ( SELECT TIPO_CONTRIBUYENTE FROM $$COMPANIA$$.NCF_CONSECUTIVO WHERE PREFIJO = @PREFIJO ));
			IF (@CONT1 <=1 )
			BEGIN
				UPDATE $$COMPANIA$$.NCF_CONSECUTIVO_USUARIO SET NCF_DEFAULT = 'S' WHERE PREFIJO = @PREFIJO AND USUARIO = @USUARIO;
			END
			ELSE
			BEGIN
				UPDATE $$COMPANIA$$.NCF_CONSECUTIVO_USUARIO SET NCF_DEFAULT = 'N' WHERE PREFIJO = @PREFIJO AND USUARIO = @USUARIO;
			END
		END
		FETCH NEXT FROM C_NCF INTO @PREFIJO, @USUARIO;
	END

	CLOSE C_NCF;
	DEALLOCATE C_NCF;
END;

 
 
 /*Fin Declare Consecutivo NFCs*/